#! /usr/bin/env python

# Declare parameters that control people tracking

PACKAGE='tracking'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#########################
## Tracking parameters ##
#########################
# Mininum confidence for track initialization:
gen.add("min_confidence_initialization", double_t, 0, "Mininum confidence for track initialization", 4.0, -10.0, 10.0)
# Maximum delay that a detection message can have in order to be considered for tracking:
gen.add("max_detection_delay", double_t, 0, "Maximum delay that a detection message can have in order to be considered for tracking", 2.0, 0.0, 3.0)
# Flag stating if the results of a calibration refinement procedure should be used to correct detection positions: 
gen.add("calibration_refinement", bool_t, 0, "Flag stating if the results of a calibration refinement procedure should be used to correct detection positions", False) 

#######################
## Motion parameters ##
#######################
# The higher is this, the higher motion variance is allowed
# it can assume these values: 0.5 0.75 0.8 0.9 0.95 0.98 0.99 0.995 0.998 0.999
gate_distance_enum = gen.enum([ gen.const("0",  double_t, 0.5, "0.5"),
		                gen.const("1",  double_t, 0.75, "0.75"),
		                gen.const("2",  double_t, 0.8, "0.8"),
		                gen.const("3", 	double_t, 0.9, "0.9"),
				gen.const("4", 	double_t, 0.95, "0.95"),
				gen.const("5", 	double_t, 0.98, "0.98"),
				gen.const("6", 	double_t, 0.99, "0.99"),
				gen.const("7", 	double_t, 0.995, "0.995"),
				gen.const("8", 	double_t, 0.998, "0.998"),
				gen.const("9", 	double_t, 0.999, "0.999")],
	                       	"An enum to set gate_distance_probability") 
gen.add("gate_distance_probability", double_t, 0, "The higher is this, the higher motion variance is allowed", 0.99, 0.5, 0.999, edit_method=gate_distance_enum)  
# Acceleration variance in people motion model:
gen.add("acceleration_variance", double_t, 0, "Acceleration variance in people motion model", 100, 0.1, 1000)
# Additional weight for position variance in people motion model:
gen.add("position_variance_weight", double_t, 0, "Additional weight for position variance in people motion model", 30, 1, 100)

#################################
## Data association parameters ##
#################################
# Flag stating if detection likelihood should be used in data association:
gen.add("detector_likelihood", bool_t, 0, "Flag stating if detection likelihood should be used in data association", True)
# Weight of detection likelihood in data association:
gen.add("detector_weight", double_t, 0, "Weight of detection likelihood in data association", -0.25, -10.0, 0.0)
# Flag stating if track velocity should be considered in data association:
#gen.add("velocity_in_motion_term", bool_t, 0, " Flag stating if track velocity should be considered in data association", True) 
# Weight of motion likelihood in data association:
gen.add("motion_weight", double_t, 0, "Weight of motion likelihood in data association", 0.25, 0.0, 10.0)  

################################
## Tracking policy parameters ##
################################
# Track duration (seconds) after last valid detection:
gen.add("sec_before_old", double_t, 0, "Track duration (seconds) after last valid detection", 8.0, 0.0, 100.0)
# Seconds within which a track should be validated (otherwise it is discarded):
gen.add("sec_before_fake", double_t, 0, "Seconds within which a track should be validated (otherwise it is discarded)", 2.4, 0.0, 10.0)
# Seconds after which a visible track obtain NORMAL status:
gen.add("sec_remain_new", double_t, 0, "Seconds after which a visible track obtain NORMAL status", 1.2, 0.0, 10.0)
# Minimum number of detection<->track associations needed for validating a track:
gen.add("detections_to_validate", int_t, 0, "Minimum number of detection<->track associations needed for validating a track", 3, 1, 20)

###########
## Debug ##
###########
# Dimension of the point cloud containing track trajectories:
#gen.add("history_size", int_t, 0, "Dimension of the point cloud containing track trajectories", 500, 1, 10000)
# Dimension of the point cloud containing detection trajectories:
#gen.add("detection_history_size", int_t, 0, "Dimension of the point cloud containing detection trajectories", 500, 1, 10000)

# First string value is node name, used only for generating documentation
# Second string value ("Tracker") is name of class and generated
#    .h file, with "Config" added, so class TrackerConfig
exit(gen.generate(PACKAGE, "tracking", "Tracker"))
